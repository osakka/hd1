openapi: 3.0.3
info:
  title: HD1 (Holodeck One) API
  description: |
    Revolutionary API-first 3D coordinate system with universal world boundaries.
    Single source of truth for sessions, worlds, objects, and real-time control.
    
    **CORE PRINCIPLES:**
    - Everything API-driven (zero shell commands)
    - Universal coordinate system [-12, +12] on all axes
    - Objects honor world boundaries absolutely
    - Named object persistence with full lifecycle
    - Real-time WebSocket + REST hybrid
    
    **ARCHITECTURE:**
    - Specification drives code generation
    - Build fails if handlers missing
    - Zero manual routing - auto-generated from spec
    
  version: 1.0.0
  contact:
    name: Holodeck One 3D Engine
    
servers:
  - url: http://localhost:8080/api
    description: Development server

paths:
  # ========================================
  # API INFORMATION
  # ========================================
  /version:
    get:
      operationId: getVersion
      tags: [System]
      summary: Get API and system version information
      description: |
        Returns version information for the API specification and system components.
        Includes API version, JS version hash, and build information.
      responses:
        '200':
          description: Version information
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version:
                    type: string
                    description: API specification version
                    example: "1.0.0"
                  js_version:
                    type: string  
                    description: Frontend JS version hash
                    example: "a1b2c3d4-e5f6g7h8"
                  build_timestamp:
                    type: string
                    format: date-time
                    description: Build timestamp
                  title:
                    type: string
                    description: API title
                    example: "HD1 (Holodeck One) API"
      x-handler: "api/system/version.go"
      x-function: "GetVersion"

  # ========================================
  # SESSION MANAGEMENT
  # ========================================
  /sessions:
    post:
      operationId: createSession
      tags: [Sessions]
      summary: Create new 3D session
      description: |
        Generates unique session ID for isolated 3D world interaction.
        Each session gets independent object registry and world state.
      responses:
        '201':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionCreated'
              example:
                success: true
                session_id: "session_a1b2c3d4"
                created: "2025-06-28T14:20:00Z"
                message: "Session created - initialize world next"
        '500':
          $ref: '#/components/responses/InternalError'
      x-handler: "api/sessions/create.go"
      x-function: "CreateSession"
      
    get:
      operationId: listSessions
      tags: [Sessions]
      summary: List all active sessions
      description: Get comprehensive list of all sessions with status and object counts
      responses:
        '200':
          description: Sessions list retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionsList'
              example:
                sessions:
                  - id: "session_a1b2c3d4"
                    created: "2025-06-28T14:20:00Z"
                    world_initialized: true
                    object_count: 3
                    status: "active"
                total: 1
                timestamp: "2025-06-28T14:25:00Z"
      x-handler: "api/sessions/list.go"
      x-function: "ListSessions"

  /sessions/{sessionId}:
    get:
      operationId: getSession
      tags: [Sessions]
      summary: Get session details
      description: Retrieve detailed session information including all objects
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            pattern: '^session_[a-f0-9]{8}$'
          example: "session_a1b2c3d4"
      responses:
        '200':
          description: Session details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionDetail'
        '404':
          $ref: '#/components/responses/NotFound'
      x-handler: "api/sessions/get.go"
      x-function: "GetSession"
      
    delete:
      operationId: deleteSession
      tags: [Sessions]
      summary: Terminate session
      description: Permanently delete session and all associated objects
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session terminated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '404':
          $ref: '#/components/responses/NotFound'
      x-handler: "api/sessions/delete.go"
      x-function: "DeleteSession"

  # ========================================
  # ENVIRONMENT MANAGEMENT
  # ========================================
  /environments:
    get:
      operationId: listEnvironments
      tags: [Environments]
      summary: List available environments
      description: |
        Returns all available HD1 environments with their physics settings.
        Environments define scale, gravity, atmosphere, and world physics parameters.
      responses:
        '200':
          description: Available environments
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  environments:
                    type: array
                    items:
                      $ref: '#/components/schemas/EnvironmentInfo'
              example:
                success: true
                environments:
                  - id: "earth-surface"
                    name: "Earth Surface"
                    description: "Standard terrestrial environment"
                    scale_unit: "m"
                    gravity: 9.8
                    atmosphere: "air"
                  - id: "molecular-scale"
                    name: "Molecular Scale"
                    description: "Nanometer-scale molecular environment"
                    scale_unit: "nm"
                    gravity: 0.0
                    atmosphere: "vacuum"
      x-handler: "api/environments/list.go"
      x-function: "ListEnvironments"

  /environments/{environmentId}:
    post:
      operationId: applyEnvironment
      tags: [Environments]
      summary: Apply environment to session
      description: |
        Applies environment settings (scale, gravity, atmosphere) to specified session.
        Environment settings affect all objects and physics in the session.
      parameters:
        - name: environmentId
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-z][a-z0-9\-]*[a-z0-9]$'
          example: "earth-surface"
          description: Environment identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - session_id
              properties:
                session_id:
                  type: string
                  pattern: '^session_[a-f0-9]{8}$'
                  description: Target session for environment application
                  example: "session_a1b2c3d4"
            example:
              session_id: "session_a1b2c3d4"
      responses:
        '200':
          description: Environment applied successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  environment_id:
                    type: string
                  session_id:
                    type: string
                  message:
                    type: string
              example:
                success: true
                environment_id: "earth-surface"
                session_id: "session_a1b2c3d4"
                message: "Environment 'Earth Surface' applied successfully"
        '404':
          description: Environment or session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid environment or session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-handler: "api/environments/apply.go"
      x-function: "ApplyEnvironment"

  # ========================================
  # PROPS MANAGEMENT
  # ========================================
  /props:
    get:
      operationId: listProps
      tags: [Props]
      summary: List available props
      description: |
        Returns all available props in the system. Props are reusable objects
        with predefined physics properties, materials, and behavior.
        
        Props automatically adapt to the current environment's scale and physics.
      responses:
        '200':
          description: List of available props
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  props:
                    type: array
                    items:
                      $ref: '#/components/schemas/PropInfo'
                    example:
                      - id: "wooden-chair"
                        name: "Wooden Chair"
                        description: "Standard wooden chair with realistic physics"
                        category: "furniture"
                        scale_compatible: ["mm", "cm", "m"]
                        mass: 5.5
                        material: "wood"
                        dimensions: {width: 0.6, height: 0.8, depth: 0.6}
      x-handler: "api/props/list.go"
      x-function: "ListProps"

  /sessions/{sessionId}/props/{propId}:
    post:
      operationId: instantiateProp
      tags: [Props]
      summary: Instantiate prop in session
      description: |
        Creates an instance of a prop in the specified session. The prop
        will be automatically scaled and physics-adjusted to match the 
        current environment.
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            example: "session-abc123"
        - name: propId
          in: path
          required: true
          schema:
            type: string
            example: "wooden-chair"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [position]
              properties:
                position:
                  $ref: '#/components/schemas/Position'
                rotation:
                  $ref: '#/components/schemas/Rotation'
                scale:
                  type: number
                  minimum: 0.1
                  maximum: 10.0
                  default: 1.0
                  description: "Scale multiplier relative to prop's base size"
                instance_name:
                  type: string
                  description: "Custom name for this prop instance"
                  example: "chair-01"
      responses:
        '200':
          description: Prop instantiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  prop_id:
                    type: string
                    example: "wooden-chair"
                  instance_name:
                    type: string
                    example: "chair-01"
                  session_id:
                    type: string
                    example: "session-abc123"
                  objects_created:
                    type: integer
                    example: 5
                  message:
                    type: string
                    example: "Prop 'Wooden Chair' instantiated as 'chair-01'"
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Session or prop not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-handler: "api/props/instantiate.go"
      x-function: "InstantiateProp"

  # ========================================
  # SCENE MANAGEMENT
  # ========================================
  /scenes:
    get:
      operationId: listScenes
      tags: [Scenes]
      summary: List available scenes
      description: |
        Returns all available HD1 scenes for holodeck environments.
        Scenes are predefined HD1 scripts that create specific environments.
      responses:
        '200':
          description: Available scenes
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  scenes:
                    type: array
                    items:
                      $ref: '#/components/schemas/SceneInfo'
      x-handler: "api/scenes/list.go"
      x-function: "ListScenes"

  /scenes/{sceneId}:
    post:
      operationId: loadScene
      tags: [Scenes]
      summary: Load scene into session
      description: |
        Loads a predefined scene (HD1 script) into the specified session.
        Clears existing objects and applies scene configuration.
      parameters:
        - name: sceneId
          in: path
          required: true
          schema:
            type: string
          description: Scene identifier (empty, anime-ui, ultimate, basic-shapes)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                session_id:
                  type: string
                  description: Target session for scene loading
              required:
                - session_id
      responses:
        '200':
          description: Scene loaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  scene_id:
                    type: string
                  session_id:
                    type: string
                  objects_created:
                    type: integer
                  message:
                    type: string
        '404':
          description: Scene not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid session or request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-handler: "api/scenes/load.go"
      x-function: "LoadScene"

  # ========================================
  # SCENE FORKING & MANAGEMENT
  # ========================================
  /sessions/{sessionId}/scenes/save:
    post:
      operationId: saveSceneFromSession
      tags: [Scenes]
      summary: Save session state as new scene
      description: |
        Creates a new scene script from current session objects.
        Generates a .sh script in share/glibsh/scenes/ with all session objects.
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                scene_id:
                  type: string
                  description: ID for new scene (becomes filename)
                  example: "my-custom-scene"
                name:
                  type: string
                  description: Human-readable scene name
                  example: "My Custom Scene"
                description:
                  type: string
                  description: Scene description
                  example: "Custom scene with modified objects"
                overwrite:
                  type: boolean
                  description: Allow overwriting existing scene
                  default: false
              required: [scene_id, name, description]
      responses:
        '201':
          description: Scene saved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  scene_id:
                    type: string
                  scene_path:
                    type: string
                  objects_exported:
                    type: integer
        '400':
          description: Invalid request or scene already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Scene already exists (use overwrite=true)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-handler: "api/scenes/save.go"
      x-function: "SaveSceneFromSession"

  /scenes/{sceneId}/fork:
    post:
      operationId: forkScene
      tags: [Scenes]
      summary: Fork scene to session for editing
      description: |
        Loads a scene into session and marks objects as "base" for tracking changes.
        Enables sandbox editing while preserving original scene integrity.
      parameters:
        - name: sceneId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                session_id:
                  type: string
                  description: Target session for forked scene
                clear_existing:
                  type: boolean
                  description: Clear existing objects before fork
                  default: true
              required: [session_id]
      responses:
        '200':
          description: Scene forked to session
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  scene_id:
                    type: string
                  session_id:
                    type: string
                  objects_forked:
                    type: integer
                  fork_timestamp:
                    type: string
        '400':
          description: Invalid scene or session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-handler: "api/scenes/fork.go"  
      x-function: "ForkScene"

  # ========================================
  # SESSION RECORDING (VIDEO)
  # ========================================
  /sessions/{sessionId}/recording/start:
    post:
      operationId: startRecording
      tags: [Recording]
      summary: Start session recording (video mode)
      description: |
        Begin temporal recording of all object changes in session.
        Captures create/update/delete operations with timestamps for playback.
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                recording_name:
                  type: string
                  description: Name for this recording
                  example: "my-holodeck-sequence"
                description:
                  type: string
                  description: Recording description
                  example: "Building a 3D scene step by step"
                clear_on_start:
                  type: boolean
                  description: Clear existing objects when recording starts
                  default: true
      responses:
        '200':
          description: Recording started
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  session_id:
                    type: string
                  recording_id:
                    type: string
                  start_time:
                    type: string
        '400':
          description: Recording already active or invalid session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-handler: "api/recording/start.go"
      x-function: "StartRecording"

  /sessions/{sessionId}/recording/stop:
    post:
      operationId: stopRecording
      tags: [Recording]
      summary: Stop session recording
      description: |
        End temporal recording and generate playback script.
        Creates .hd1 recording file with temporal sequence.
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Recording stopped and saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  session_id:
                    type: string
                  recording_id:
                    type: string
                  duration:
                    type: string
                  operations_recorded:
                    type: integer
                  recording_path:
                    type: string
        '400':
          description: No active recording or invalid session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-handler: "api/recording/stop.go"
      x-function: "StopRecording"

  /sessions/{sessionId}/recording/play:
    post:
      operationId: playRecording
      tags: [Recording]
      summary: Play back recorded sequence
      description: |
        Replay temporal sequence of object changes.
        Recreates the original object creation/modification timeline.
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recording_id:
                  type: string
                  description: ID of recording to play
                speed:
                  type: number
                  description: Playback speed multiplier
                  default: 1.0
                  example: 2.0
                clear_before_play:
                  type: boolean
                  description: Clear session before playback
                  default: true
              required: [recording_id]
      responses:
        '200':
          description: Playback started
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  session_id:
                    type: string
                  recording_id:
                    type: string
                  playback_duration:
                    type: string
                  operations_count:
                    type: integer
        '400':
          description: Recording not found or invalid session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-handler: "api/recording/play.go"
      x-function: "PlayRecording"

  /sessions/{sessionId}/recording/status:
    get:
      operationId: getRecordingStatus
      tags: [Recording]
      summary: Get recording status
      description: Get current recording state and available recordings
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Recording status
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                  recording_active:
                    type: boolean
                  current_recording:
                    type: object
                    properties:
                      recording_id:
                        type: string
                      start_time:
                        type: string
                      operations_count:
                        type: integer
                  available_recordings:
                    type: array
                    items:
                      type: object
                      properties:
                        recording_id:
                          type: string
                        name:
                          type: string
                        created_at:
                          type: string
                        duration:
                          type: string
                        operations_count:
                          type: integer
        '400':
          description: Invalid session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-handler: "api/recording/status.go"
      x-function: "GetRecordingStatus"

  # ========================================
  # OBJECT MANAGEMENT
  # ========================================
  /sessions/{sessionId}/objects:
    post:
      operationId: createObject
      tags: [Objects]
      summary: Create named 3D object
      description: |
        Creates object by connecting grid points within world boundaries.
        All coordinates must be within [-12, +12] range.
        Objects are built by connecting specific grid intersection points.
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectCreate'
            example:
              name: "my_cube"
              type: "cube"
              position: [0, 0, 0]
              scale: [2, 2, 2]
              color: [1.0, 0.0, 0.0]
      responses:
        '201':
          description: Object created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectCreated'
        '400':
          description: Invalid coordinates or object data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Coordinates (15, 0, 0) outside world bounds [-12, +12]"
      x-handler: "api/objects/create.go"
      x-function: "CreateObject"

    get:
      operationId: listObjects
      tags: [Objects]
      summary: List all objects in session
      description: Get all named objects with their current properties
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Objects list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectsList'
      x-handler: "api/objects/list.go"
      x-function: "ListObjects"

  /sessions/{sessionId}/objects/{objectName}:
    get:
      operationId: getObject
      tags: [Objects]
      summary: Get object details
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
        - name: objectName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Object details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectDetail'
        '404':
          $ref: '#/components/responses/NotFound'
      x-handler: "api/objects/get.go"
      x-function: "GetObject"

    put:
      operationId: updateObject
      tags: [Objects]
      summary: Update object properties
      description: |
        Move, scale, or change object color.
        New coordinates must still be within world boundaries.
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
        - name: objectName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectUpdate'
      responses:
        '200':
          description: Object updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectUpdated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
      x-handler: "api/objects/update.go"
      x-function: "UpdateObject"

    delete:
      operationId: deleteObject
      tags: [Objects]
      summary: Delete named object
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
        - name: objectName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Object deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '404':
          $ref: '#/components/responses/NotFound'
      x-handler: "api/objects/delete.go"
      x-function: "DeleteObject"

  # ========================================
  # LOGGING CONFIGURATION
  # ========================================
  /admin/logging/config:
    get:
      operationId: getLoggingConfig
      tags: [Admin]
      summary: Get current logging configuration
      description: |
        Returns current logging level and trace module configuration.
        Used for debugging and system administration.
      responses:
        '200':
          description: Current logging configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  level:
                    type: string
                    enum: [TRACE, DEBUG, INFO, WARN, ERROR, FATAL]
                    description: Current logging level
                  trace_modules:
                    type: array
                    items:
                      type: string
                    description: List of modules with tracing enabled
                  log_dir:
                    type: string
                    description: Directory where logs are written
      x-handler: "api/logging/handlers.go"
      x-function: "GetLoggingConfig"

    post:
      operationId: setLoggingConfig
      tags: [Admin]
      summary: Update logging configuration
      description: |
        Updates logging level and trace module configuration.
        Changes take effect immediately.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                level:
                  type: string
                  enum: [TRACE, DEBUG, INFO, WARN, ERROR, FATAL]
                  description: New logging level
                trace_modules:
                  type: array
                  items:
                    type: string
                  description: List of modules to enable tracing for
      responses:
        '200':
          description: Configuration updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  level:
                    type: string
                  trace_modules:
                    type: array
                    items:
                      type: string
        '400':
          description: Invalid configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-handler: "api/logging/handlers.go"
      x-function: "SetLoggingConfig"

  /admin/logging/level:
    post:
      operationId: setLogLevel
      tags: [Admin]
      summary: Set logging level
      description: |
        Sets the global logging level. All log messages below this level
        will be filtered out to reduce overhead.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                level:
                  type: string
                  enum: [TRACE, DEBUG, INFO, WARN, ERROR, FATAL]
                  description: New logging level
              required: [level]
      responses:
        '200':
          description: Log level updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  level:
                    type: string
                  message:
                    type: string
        '400':
          description: Invalid log level
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-handler: "api/logging/handlers.go"
      x-function: "SetLogLevel"

  /admin/logging/trace:
    post:
      operationId: setTraceModules
      tags: [Admin]
      summary: Configure trace modules
      description: |
        Enable or disable tracing for specific modules. Tracing provides
        detailed execution information for debugging specific components.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enable:
                  type: array
                  items:
                    type: string
                  description: Modules to enable tracing for
                disable:
                  type: array
                  items:
                    type: string
                  description: Modules to disable tracing for
      responses:
        '200':
          description: Trace configuration updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  enabled:
                    type: array
                    items:
                      type: string
                  disabled:
                    type: array
                    items:
                      type: string
                  message:
                    type: string
      x-handler: "api/logging/handlers.go"
      x-function: "SetTraceModules"

  /admin/logging/logs:
    get:
      operationId: getLogs
      tags: [Admin, Logging]
      summary: Get recent log entries
      description: |
        Retrieve the last N log entries from the unified logging system.
        Supports log rotation - reads from current and rotated log files.
        Professional troubleshooting and monitoring endpoint.
      parameters:
        - name: count
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
          description: "Number of recent log entries to return (max 1000)"
          example: 50
      responses:
        '200':
          description: Log entries retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  entries:
                    type: array
                    items:
                      type: object
                      properties:
                        timestamp:
                          type: string
                          format: date-time
                        process_id:
                          type: integer
                        thread_id:
                          type: string
                        level:
                          type: string
                          enum: [TRACE, DEBUG, INFO, WARN, ERROR, FATAL]
                        function:
                          type: string
                        file:
                          type: string
                        line:
                          type: integer
                        message:
                          type: string
                        data:
                          type: object
                  count:
                    type: integer
                    description: "Number of entries returned"
                  requested:
                    type: integer
                    description: "Number of entries requested"
              example:
                entries:
                  - timestamp: "2025-06-29T18:30:00.123Z"
                    process_id: 12345
                    thread_id: "main"
                    level: "INFO"
                    function: "CreateSession"
                    file: "create"
                    line: 42
                    message: "session created successfully"
                    data:
                      session_id: "session_abc123"
                count: 1
                requested: 50
        '500':
          $ref: '#/components/responses/InternalError'
      x-handler: "api/logging/handlers.go"
      x-function: "GetLogs"

  # ========================================
  # BROWSER CONTROL
  # ========================================
  /browser/refresh:
    post:
      operationId: forceRefresh
      tags: [Browser]
      summary: Force browser refresh and session reset
      description: |-
        Forces all connected browsers to refresh and optionally reset to specific session.
        Essential for HD1 session management and debugging.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                session_id:
                  type: string
                  description: "Session ID to force browsers to connect to"
                clear_storage:
                  type: boolean
                  default: true
                  description: "Clear browser localStorage before refresh"
            example:
              session_id: "session_z41qg4sg"
              clear_storage: true
      responses:
        '200':
          description: Browser refresh command sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
      x-handler: "api/browser/control.go"
      x-function: "ForceRefresh"

  /browser/canvas:
    post:
      operationId: setCanvas
      tags: [Browser]
      summary: Direct WebGL canvas control
      description: |-
        Direct control over WebGL renderer via API.
        Allows programmatic manipulation of 3D scene without page refresh.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [session_id, command]
              properties:
                session_id:
                  type: string
                command:
                  type: string
                  enum: [create, update, delete, clear, camera, render]
                objects:
                  type: array
                  items:
                    type: object
                camera:
                  type: object
                clear:
                  type: boolean
            example:
              session_id: "session_z41qg4sg"
              command: "create"
              objects: [{"id": "test", "type": "cube", "x": 0, "y": 0, "z": 0}]
      responses:
        '200':
          description: Canvas command sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
      x-handler: "api/browser/control.go"
      x-function: "SetCanvas"

  # ========================================
  # CAMERA CONTROL
  # ========================================
  /sessions/{sessionId}/camera/position:
    put:
      operationId: setCameraPosition
      tags: [Camera]
      summary: Set camera coordinates
      description: Position camera anywhere within world boundaries
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CameraPosition'
            example:
              position: [0, 0, 0]
      responses:
        '200':
          description: Camera positioned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-handler: "api/camera/position.go"
      x-function: "SetCameraPosition"

  /sessions/{sessionId}/camera/orbit:
    post:
      operationId: startCameraOrbit
      tags: [Camera]
      summary: Start camera orbital motion
      description: Begin smooth camera rotation around target point
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CameraOrbit'
      responses:
        '200':
          description: Camera orbit started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
      x-handler: "api/camera/orbit.go"
      x-function: "StartCameraOrbit"

# ========================================
# SCHEMA DEFINITIONS
# ========================================
components:
  schemas:
    # Session Schemas
    SessionCreated:
      type: object
      required: [success, session_id, created, message]
      properties:
        success:
          type: boolean
          example: true
        session_id:
          type: string
          pattern: '^session_[a-f0-9]{8}$'
          example: "session_a1b2c3d4"
        created:
          type: string
          format: date-time
        message:
          type: string
          example: "Session created - initialize world next"

    SessionsList:
      type: object
      required: [sessions, total, timestamp]
      properties:
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/SessionSummary'
        total:
          type: integer
          minimum: 0
        timestamp:
          type: string
          format: date-time

    SessionSummary:
      type: object
      required: [id, created, world_initialized, object_count, status]
      properties:
        id:
          type: string
        created:
          type: string
          format: date-time
        world_initialized:
          type: boolean
        object_count:
          type: integer
          minimum: 0
        status:
          type: string
          enum: [active, inactive, error]

    SessionDetail:
      allOf:
        - $ref: '#/components/schemas/SessionSummary'
        - type: object
          properties:
            objects:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/ObjectDetail'

    # Environment Schemas
    EnvironmentInfo:
      type: object
      required: [id, name, description, scale_unit, gravity, atmosphere]
      properties:
        id:
          type: string
          pattern: '^[a-z][a-z0-9\-]*[a-z0-9]$'
          example: "earth-surface"
          description: "Environment identifier"
        name:
          type: string
          example: "Earth Surface"
          description: "Human-readable environment name"
        description:
          type: string
          example: "Standard terrestrial environment"
          description: "Environment description"
        scale_unit:
          type: string
          enum: ["nm", "μm", "mm", "cm", "m", "km", "Mm", "Gm"]
          example: "m"
          description: "Scale unit for coordinate system"
        gravity:
          type: number
          minimum: 0.0
          maximum: 100.0
          example: 9.8
          description: "Gravity acceleration (m/s²)"
        atmosphere:
          type: string
          enum: ["air", "vacuum", "thin_air", "liquid"]
          example: "air"
          description: "Atmospheric conditions"
        boundaries:
          type: object
          properties:
            min:
              type: integer
              example: -12
            max:
              type: integer
              example: 12
          description: "Coordinate system boundaries"
        complexity:
          type: string
          enum: ["simple", "moderate", "complex"]
          example: "simple"
          description: "Environment complexity level"
        tags:
          type: array
          items:
            type: string
          example: ["terrestrial", "standard"]
          description: "Environment categorization tags"

    # Props Schemas
    PropInfo:
      type: object
      required: [id, name, description, category, scale_compatible, mass, material, dimensions]
      properties:
        id:
          type: string
          pattern: '^[a-z][a-z0-9\-]*[a-z0-9]$'
          example: "wooden-chair"
          description: "Prop identifier"
        name:
          type: string
          example: "Wooden Chair"
          description: "Human-readable prop name"
        description:
          type: string
          example: "Standard wooden chair with realistic physics"
          description: "Prop description"
        category:
          type: string
          enum: ["furniture", "tools", "decorative", "structural", "electronic", "organic"]
          example: "furniture"
          description: "Prop category for organization"
        scale_compatible:
          type: array
          items:
            type: string
            enum: ["nm", "μm", "mm", "cm", "m", "km", "Mm", "Gm"]
          example: ["mm", "cm", "m"]
          description: "Scale units this prop works well in"
        mass:
          type: number
          minimum: 0.001
          maximum: 10000.0
          example: 5.5
          description: "Mass in kilograms (at meter scale)"
        material:
          type: string
          enum: ["wood", "metal", "plastic", "glass", "fabric", "stone", "ceramic", "organic"]
          example: "wood"
          description: "Primary material for physics calculation"
        dimensions:
          type: object
          required: [width, height, depth]
          properties:
            width:
              type: number
              minimum: 0.001
              maximum: 100.0
              example: 0.6
              description: "Width in meters"
            height:
              type: number
              minimum: 0.001
              maximum: 100.0
              example: 0.8
              description: "Height in meters"
            depth:
              type: number
              minimum: 0.001
              maximum: 100.0
              example: 0.6
              description: "Depth in meters"
          description: "Physical dimensions at meter scale"
        physics_properties:
          type: object
          properties:
            friction:
              type: number
              minimum: 0.0
              maximum: 2.0
              example: 0.7
              description: "Surface friction coefficient"
            restitution:
              type: number
              minimum: 0.0
              maximum: 1.0
              example: 0.3
              description: "Bounce/elasticity coefficient"
            density:
              type: number
              minimum: 0.1
              maximum: 20000.0
              example: 600.0
              description: "Material density (kg/m³)"
          description: "Physics simulation properties"
        complexity:
          type: string
          enum: ["simple", "moderate", "complex"]
          example: "moderate"
          description: "Geometric complexity level"
        components:
          type: array
          items:
            type: string
          example: ["seat", "backrest", "legs", "armrests"]
          description: "Named components within this prop"
        tags:
          type: array
          items:
            type: string
          example: ["seating", "wooden", "indoor"]
          description: "Categorization and search tags"

    # Object Schemas
    ObjectCreate:
      type: object
      required: [name, type, position]
      properties:
        name:
          type: string
          pattern: '^[a-zA-Z0-9_-]+$'
          example: "my_cube"
        type:
          type: string
          enum: [cube, sphere, plane, line, light]
        position:
          $ref: '#/components/schemas/Coordinate3D'
        scale:
          $ref: '#/components/schemas/Scale3D'
        color:
          $ref: '#/components/schemas/ColorRGB'
        visible:
          type: boolean
          default: true
          description: "Whether the object is visible in the scene"
        lightType:
          type: string
          enum: [point, directional, ambient, spot]
          description: "Light type (only for type: light)"
        intensity:
          type: number
          minimum: 0
          maximum: 10
          default: 1.0
          description: "Light intensity (only for type: light)"

    ObjectCreated:
      type: object
      required: [success, object_id, name, position]
      properties:
        success:
          type: boolean
        object_id:
          type: string
        name:
          type: string
        position:
          $ref: '#/components/schemas/Coordinate3D'
        message:
          type: string

    ObjectsList:
      type: object
      required: [objects, total]
      properties:
        objects:
          type: array
          items:
            $ref: '#/components/schemas/ObjectSummary'
        total:
          type: integer

    ObjectSummary:
      type: object
      required: [name, type, position, visible]
      properties:
        name:
          type: string
        type:
          type: string
        position:
          $ref: '#/components/schemas/Coordinate3D'
        visible:
          type: boolean
          default: true
          description: "Whether the object is visible in the scene"
        created:
          type: string
          format: date-time

    ObjectDetail:
      allOf:
        - $ref: '#/components/schemas/ObjectSummary'
        - type: object
          properties:
            scale:
              $ref: '#/components/schemas/Scale3D'
            color:
              $ref: '#/components/schemas/ColorRGB'
            last_updated:
              type: string
              format: date-time

    ObjectUpdate:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/Coordinate3D'
        scale:
          $ref: '#/components/schemas/Scale3D'
        color:
          $ref: '#/components/schemas/ColorRGB'
        visible:
          type: boolean
          description: "Whether the object is visible in the scene"

    ObjectUpdated:
      type: object
      required: [success, name, updated_fields]
      properties:
        success:
          type: boolean
        name:
          type: string
        updated_fields:
          type: array
          items:
            type: string
        message:
          type: string

    # Camera Schemas
    CameraPosition:
      type: object
      required: [position]
      properties:
        position:
          $ref: '#/components/schemas/Coordinate3D'

    CameraOrbit:
      type: object
      required: [radius, duration]
      properties:
        center:
          $ref: '#/components/schemas/Coordinate3D'
          default: [0, 0, 0]
        radius:
          type: number
          minimum: 1
          example: 20
        height:
          type: number
          default: 10
        duration:
          type: number
          minimum: 1
          example: 30
          description: "Duration in seconds"
        speed:
          type: number
          default: 0.1
          description: "Angular speed"

    # Common Schemas
    SceneInfo:
      type: object
      properties:
        id:
          type: string
          description: Unique scene identifier
          example: "anime-ui"
        name:
          type: string
          description: Human-readable scene name
          example: "Anime UI Demo"
        description:
          type: string
          description: Scene description
          example: "Interactive anime-style holodeck with floating UI elements"
        object_count:
          type: integer
          description: Number of objects this scene creates
          example: 25
        complexity:
          type: string
          enum: [simple, moderate, complex]
          description: Scene complexity level
        tags:
          type: array
          items:
            type: string
          description: Scene tags for categorization
          example: ["ui", "interactive", "demo"]
      required:
        - id
        - name
        - description

    Coordinate3D:
      type: array
      items:
        type: number
        minimum: -12
        maximum: 12
      minItems: 3
      maxItems: 3
      example: [0, 0, 0]
      description: "3D coordinates within world bounds [-12, +12]"

    Scale3D:
      type: array
      items:
        type: number
        minimum: 0.1
        maximum: 10
      minItems: 3
      maxItems: 3
      example: [1, 1, 1]
      default: [1, 1, 1]

    ColorRGB:
      type: array
      items:
        type: number
        minimum: 0
        maximum: 1
      minItems: 3
      maxItems: 3
      example: [1.0, 0.0, 0.0]
      default: [1.0, 1.0, 1.0]
      description: "RGB color values [r, g, b] from 0.0 to 1.0"

    Success:
      type: object
      required: [success]
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string

    Error:
      type: object
      required: [error]
      properties:
        error:
          type: string
        details:
          type: string

  responses:
    BadRequest:
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

# ========================================
# EXTENSION PROPERTIES
# ========================================
x-code-generation:
  strict-validation: true
  auto-routing: true
  handler-validation: true
  fail-on-missing-handlers: true
  
x-world-constraints:
  coordinate-bounds: [-12, 12]
  grid-size: 25
  max-objects-per-session: 1000
  
x-performance:
  max-concurrent-sessions: 100
  session-timeout: 3600