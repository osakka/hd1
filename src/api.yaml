openapi: 3.0.3
info:
  title: HD1 (Holodeck One) Three.js API
  description: |
    Pure Three.js API-driven 3D platform with TCP-simple synchronization.
    Single source of truth for all 3D operations via sequence numbers.
    
    **CORE PRINCIPLES:**
    - Three.js native operations only
    - Sequence-based synchronization (TCP-simple)
    - Zero abstraction layers
    - Operations create the scene state
    
    **ARCHITECTURE:**
    - Operations → Sequence Numbers → Sync → Three.js Scene
    - Every operation gets a sequence number
    - Clients apply operations in order
    - Scene state = result of operations 1...N
    
  version: 6.0.0
  contact:
    name: HD1 Three.js Engine
    
servers:
  - url: http://localhost:8080/api
    description: Development server

paths:
  # ========================================
  # SYNC OPERATIONS
  # ========================================
  /sync/operations:
    post:
      operationId: submitOperation
      summary: Submit operation to global sequence
      description: |
        Submits an operation to the global sequence for synchronization.
        Operation receives a sequence number and is broadcast to all clients.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [avatar_move, entity_create, entity_update, entity_delete, scene_update]
                  description: Type of operation
                data:
                  type: object
                  description: Operation-specific data
              required: [type, data]
      responses:
        '200':
          description: Operation submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  seq_num:
                    type: integer
                    example: 1234
                  message:
                    type: string
                    example: "Operation submitted"
      x-handler: "api/sync/operations.go"
      x-function: "SubmitOperation"

  /sync/missing/{from}/{to}:
    get:
      operationId: getMissingOperations
      summary: Get missing operations
      description: |
        Returns operations from sequence 'from' to 'to' (inclusive).
        Used for client synchronization when operations are missed.
      parameters:
        - name: from
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Starting sequence number
        - name: to
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Ending sequence number
      responses:
        '200':
          description: Missing operations retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  operations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Operation'
      x-handler: "api/sync/missing.go"
      x-function: "GetMissingOperations"

  /sync/full:
    get:
      operationId: getFullSync
      summary: Get all operations for new client
      description: |
        Returns all operations from sequence 1 to current.
        Used when a new client joins to reconstruct the full scene state.
      responses:
        '200':
          description: Full operation history retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  operations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Operation'
                  current_sequence:
                    type: integer
                    example: 1234
      x-handler: "api/sync/full.go"
      x-function: "GetFullSync"

  /sync/stats:
    get:
      operationId: getSyncStats
      summary: Get synchronization statistics
      description: |
        Returns statistics about the synchronization system.
      responses:
        '200':
          description: Sync statistics retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  stats:
                    type: object
                    properties:
                      next_sequence:
                        type: integer
                        example: 1235
                      stored_operations:
                        type: integer
                        example: 1234
                      connected_clients:
                        type: integer
                        example: 5
      x-handler: "api/sync/stats.go"
      x-function: "GetSyncStats"

  # ========================================
  # THREE.JS ENTITIES
  # ========================================
  /threejs/entities:
    post:
      operationId: createEntity
      summary: Create Three.js entity
      description: |
        Creates a Three.js mesh entity with geometry, material, and transform.
        Submits entity_create operation to the global sequence.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                geometry:
                  $ref: '#/components/schemas/Geometry'
                material:
                  $ref: '#/components/schemas/Material'
                position:
                  $ref: '#/components/schemas/Vector3'
                rotation:
                  $ref: '#/components/schemas/Vector3'
                scale:
                  $ref: '#/components/schemas/Vector3'
                visible:
                  type: boolean
                  default: true
              required: [geometry, material]
      responses:
        '201':
          description: Entity created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  entity_id:
                    type: string
                    example: "entity-123"
                  seq_num:
                    type: integer
                    example: 1234
      x-handler: "api/threejs/entities.go"
      x-function: "CreateEntity"

  /threejs/entities/{entityId}:
    put:
      operationId: updateEntity
      summary: Update Three.js entity
      description: |
        Updates an existing Three.js entity's properties.
        Submits entity_update operation to the global sequence.
      parameters:
        - name: entityId
          in: path
          required: true
          schema:
            type: string
          description: Entity ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                position:
                  $ref: '#/components/schemas/Vector3'
                rotation:
                  $ref: '#/components/schemas/Vector3'
                scale:
                  $ref: '#/components/schemas/Vector3'
                visible:
                  type: boolean
                material:
                  $ref: '#/components/schemas/Material'
      responses:
        '200':
          description: Entity updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  seq_num:
                    type: integer
                    example: 1235
      x-handler: "api/threejs/entities.go"
      x-function: "UpdateEntity"

    delete:
      operationId: deleteEntity
      summary: Delete Three.js entity
      description: |
        Deletes a Three.js entity from the scene.
        Submits entity_delete operation to the global sequence.
      parameters:
        - name: entityId
          in: path
          required: true
          schema:
            type: string
          description: Entity ID
      responses:
        '200':
          description: Entity deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  seq_num:
                    type: integer
                    example: 1236
      x-handler: "api/threejs/entities.go"
      x-function: "DeleteEntity"

  # ========================================
  # AVATARS
  # ========================================
  /threejs/avatars/{sessionId}/move:
    post:
      operationId: moveAvatar
      summary: Move avatar
      description: |
        Updates avatar position and rotation.
        Submits avatar_move operation to the global sequence.
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
          description: Session ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                position:
                  $ref: '#/components/schemas/Vector3'
                rotation:
                  $ref: '#/components/schemas/Vector3'
                animation:
                  type: string
                  enum: [idle, walk, run]
                  default: idle
              required: [position]
      responses:
        '200':
          description: Avatar moved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  seq_num:
                    type: integer
                    example: 1237
      x-handler: "api/threejs/avatars.go"
      x-function: "MoveAvatar"

  # ========================================
  # SCENE MANAGEMENT
  # ========================================
  /threejs/scene:
    get:
      operationId: getScene
      summary: Get current scene state
      description: |
        Returns the current Three.js scene state as JSON.
        This is the result of applying all operations in sequence.
      responses:
        '200':
          description: Scene state retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  scene:
                    $ref: '#/components/schemas/Scene'
                  current_sequence:
                    type: integer
                    example: 1234
      x-handler: "api/threejs/scene.go"
      x-function: "GetScene"

    put:
      operationId: updateScene
      summary: Update scene properties
      description: |
        Updates scene-level properties like background, fog, etc.
        Submits scene_update operation to the global sequence.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                background:
                  type: string
                  description: Background color (hex)
                  example: "#87CEEB"
                fog:
                  type: object
                  properties:
                    color:
                      type: string
                      example: "#ffffff"
                    near:
                      type: number
                      example: 1.0
                    far:
                      type: number
                      example: 100.0
      responses:
        '200':
          description: Scene updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  seq_num:
                    type: integer
                    example: 1238
      x-handler: "api/threejs/scene.go"
      x-function: "UpdateScene"

  # ========================================
  # SYSTEM
  # ========================================
  /system/version:
    get:
      operationId: getVersion
      summary: Get system version
      description: |
        Returns the current HD1 version and Three.js information.
      responses:
        '200':
          description: Version information retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  version:
                    type: string
                    example: "6.0.0"
                  engine:
                    type: string
                    example: "Three.js"
                  sync_protocol:
                    type: string
                    example: "TCP-Simple"
      x-handler: "api/system/version.go"
      x-function: "GetVersionHandler"

components:
  schemas:
    Operation:
      type: object
      properties:
        seq_num:
          type: integer
          example: 1234
        client_id:
          type: string
          example: "client-abc123"
        type:
          type: string
          enum: [avatar_move, entity_create, entity_update, entity_delete, scene_update]
        data:
          type: object
          description: Operation-specific data
        timestamp:
          type: string
          format: date-time

    Vector3:
      type: object
      properties:
        x:
          type: number
          example: 1.0
        y:
          type: number
          example: 2.0
        z:
          type: number
          example: 3.0
      required: [x, y, z]

    Geometry:
      type: object
      properties:
        type:
          type: string
          enum: [box, sphere, plane, cylinder]
        width:
          type: number
          example: 1.0
        height:
          type: number
          example: 1.0
        depth:
          type: number
          example: 1.0
        radius:
          type: number
          example: 0.5
        segments:
          type: integer
          example: 32
      required: [type]

    Material:
      type: object
      properties:
        type:
          type: string
          enum: [basic, phong, standard]
        color:
          type: string
          example: "#ff0000"
        transparent:
          type: boolean
          default: false
        opacity:
          type: number
          minimum: 0.0
          maximum: 1.0
          default: 1.0
        metalness:
          type: number
          minimum: 0.0
          maximum: 1.0
          default: 0.0
        roughness:
          type: number
          minimum: 0.0
          maximum: 1.0
          default: 0.5
      required: [type, color]

    Scene:
      type: object
      properties:
        background:
          type: string
          description: Background color
        fog:
          type: object
          properties:
            color:
              type: string
            near:
              type: number
            far:
              type: number
        entities:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              geometry:
                $ref: '#/components/schemas/Geometry'
              material:
                $ref: '#/components/schemas/Material'
              position:
                $ref: '#/components/schemas/Vector3'
              rotation:
                $ref: '#/components/schemas/Vector3'
              scale:
                $ref: '#/components/schemas/Vector3'
              visible:
                type: boolean
        avatars:
          type: array
          items:
            type: object
            properties:
              session_id:
                type: string
              position:
                $ref: '#/components/schemas/Vector3'
              rotation:
                $ref: '#/components/schemas/Vector3'
              animation:
                type: string