// ===================================================================
// WARNING: AUTO-GENERATED CODE - DO NOT MODIFY THIS FILE
// ===================================================================
//
// This file is automatically generated from api.yaml specification.
// 
// ⚠️  CRITICAL WARNING: ALL MANUAL CHANGES WILL BE LOST ⚠️
//
// • This file is regenerated on every build
// • Changes made here are NON-PERSISTENT
// • Manual modifications will be OVERWRITTEN
// • To modify routing: Update api.yaml specification
//
// Generation Command: make generate
// Source File: /opt/hd1/src/api.yaml
// Generated: Auto-generated by HD1 Three.js specification-driven development
//
// ===================================================================
// SINGLE SOURCE OF TRUTH: api.yaml drives ALL Three.js routing
// ===================================================================
package router

import (
	"context"
	"net/http"
	
	"github.com/gorilla/mux"
	"holodeck1/logging"
	"holodeck1/server"

	"holodeck1/api/sync"
	"holodeck1/api/entities"
	"holodeck1/api/avatars"
	"holodeck1/api/scene"
	"holodeck1/api/system"
)

// APIRouter manages all auto-generated Three.js routes
type APIRouter struct {
	router *mux.Router
	hub    *server.Hub
}

// NewAPIRouter creates router from Three.js specification
func NewAPIRouter(hub *server.Hub) *APIRouter {
	r := &APIRouter{
		router: mux.NewRouter(),
		hub:    hub,
	}
	r.setupRoutes()
	return r
}

// ServeHTTP implements http.Handler interface
func (ar *APIRouter) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	// Add hub to request context
	ctx := context.WithValue(r.Context(), "hub", ar.hub)
	r = r.WithContext(ctx)
	
	// Add CORS headers
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type, X-Client-ID")
	
	if r.Method == "OPTIONS" {
		w.WriteHeader(http.StatusOK)
		return
	}
	
	ar.router.ServeHTTP(w, r)
}

// setupRoutes configures all API routes from specification
func (ar *APIRouter) setupRoutes() {
	// API prefix
	api := ar.router.PathPrefix("/api").Subrouter()
	
	// ========================================
	// SYNC OPERATIONS (Generated from spec)
	// ========================================
{{range .SyncOperations}}
	api.HandleFunc("{{.Path}}", sync.{{.HandlerFunc}}).Methods("{{.Method}}"){{end}}
	
	// ========================================
	// ENTITIES (Generated from spec)
	// ========================================
{{range .Entities}}
	api.HandleFunc("{{.Path}}", entities.{{.HandlerFunc}}).Methods("{{.Method}}"){{end}}
	
	// ========================================
	// AVATARS (Generated from spec)
	// ========================================
{{range .Avatars}}
	api.HandleFunc("{{.Path}}", avatars.{{.HandlerFunc}}).Methods("{{.Method}}"){{end}}
	
	// ========================================
	// SCENE MANAGEMENT (Generated from spec)
	// ========================================
{{range .Scene}}
	api.HandleFunc("{{.Path}}", scene.{{.HandlerFunc}}).Methods("{{.Method}}"){{end}}
	
	// ========================================
	// SYSTEM (Generated from spec)
	// ========================================
{{range .System}}
	api.HandleFunc("{{.Path}}", func(w http.ResponseWriter, r *http.Request) {
		hub := r.Context().Value("hub").(*server.Hub)
		system.{{.HandlerFunc}}(w, r, hub)
	}).Methods("{{.Method}}"){{end}}
	
	logging.Info("HD1 API routes configured", map[string]interface{}{
		"total_routes": {{.TotalRoutes}},
		"sync_ops": {{.SyncOpsCount}},
		"entity_ops": {{.EntityOpsCount}},
		"avatar_ops": {{.AvatarOpsCount}},
		"scene_ops": {{.SceneOpsCount}},
		"system_ops": {{.SystemOpsCount}},
	})
}