// ===================================================================
// WARNING: AUTO-GENERATED CODE - DO NOT MODIFY THIS FILE
// ===================================================================
//
// This JavaScript API client is automatically generated from api.yaml
// 
// ⚠️  CRITICAL WARNING: ALL MANUAL CHANGES WILL BE LOST ⚠️
//
// • This file is regenerated on every build
// • Changes made here are NON-PERSISTENT  
// • Manual modifications will be OVERWRITTEN
// • To modify API client: Update api.yaml specification
//
// Generation Command: make generate
// Source File: /opt/hd1/src/api.yaml
// Generated: Auto-generated by HD1 specification-driven development
//
// ===================================================================
// THE CROWN JEWEL: 100% Single Source of Truth API Client
// ===================================================================

class HD1APIClient {
    constructor(baseURL = window.HD1_API_BASE || `${window.location.protocol}//${window.location.host}/api`) {
        this.baseURL = baseURL;
        this.defaultHeaders = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        };
    }

    // Core HTTP request method with standard error handling
    async request(method, path, data = null, headers = {}) {
        const url = this.baseURL + path;
        const config = {
            method: method.toUpperCase(),
            headers: { ...this.defaultHeaders, ...headers }
        };

        if (data && (method.toUpperCase() === 'POST' || method.toUpperCase() === 'PUT')) {
            config.body = JSON.stringify(data);
        }

        try {
            const response = await fetch(url, config);
            
            // Standard error handling
            if (!response.ok) {
                const errorData = await response.text();
                throw new Error('HTTP ' + response.status + ': ' + errorData);
            }

            // Parse JSON response
            const responseData = await response.json();
            console.log('API Response:', method, path, responseData);
            return responseData;
        } catch (error) {
            console.error('API Error:', method, path, error);
            throw error;
        }
    }

    // Extract path parameters from URL patterns
    extractPathParams(pattern, values) {
        let path = pattern;
        const params = pattern.match(/\{([^}]+)\}/g) || [];
        
        params.forEach((param, index) => {
            const paramName = param.slice(1, -1); // Remove { }
            const value = values[index] || '';
            path = path.replace(param, value);
        });
        
        return path;
    }

{{range .Methods}}
    // {{.Comment}}
    {{.MethodName}}({{.Parameters}}) {
        {{.Implementation}}
    }
{{end}}
}

// Export for use with existing HD1 A-Frame system
window.HD1APIClient = HD1APIClient;

// Create global API client instance
window.hd1API = new HD1APIClient();

console.log('👑 HD1 API Client loaded - Auto-generated from specification');
console.log('Available methods:', Object.getOwnPropertyNames(HD1APIClient.prototype).filter(name => name !== 'constructor'));