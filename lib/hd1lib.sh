#!/bin/bash
# ===================================================================
# WARNING: AUTO-GENERATED CODE - DO NOT MODIFY THIS FILE
# ===================================================================
#
# This file is automatically generated from api_new.yaml specification.
# 
# ⚠️  CRITICAL WARNING: ALL MANUAL CHANGES WILL BE LOST ⚠️
#
# • This file is regenerated on every build
# • Changes made here are NON-PERSISTENT
# • Manual modifications will be OVERWRITTEN
# • To modify shell functions: Update api_new.yaml specification
#
# Generation Command: make generate
# Source File: /opt/hd1/src/api.yaml
# Generated: Auto-generated by HD1 Three.js specification-driven development
#
# ===================================================================
# SINGLE SOURCE OF TRUTH: api.yaml drives ALL shell functions
# ===================================================================

# HD1 Three.js Shell Library
# Professional command-line interface for HD1 Three.js operations

# Configuration
HD1_API_BASE="${HD1_API_BASE:-http://localhost:8080/api}"
HD1_CLIENT_ID="${HD1_CLIENT_ID:-shell-$(date +%s)}"

# Utility functions
hd1_request() {
    local method="$1"
    local path="$2"
    local data="$3"
    
    local curl_args=("-X" "$method" "-H" "Content-Type: application/json" "-H" "X-Client-ID: $HD1_CLIENT_ID")
    
    if [[ -n "$data" ]]; then
        curl_args+=("-d" "$data")
    fi
    
    curl -s "${curl_args[@]}" "$HD1_API_BASE$path"
}

hd1_json_escape() {
    echo "$1" | sed 's/"/\\"/g'
}

# ========================================
# SYNC OPERATIONS (Generated from spec)
# ========================================


# POST /sync/operations - submitOperation
hd1_submitOperation() {
    hd1_request "POST" "/sync/operations" "$1"
}

# GET /sync/missing/{from}/{to} - getMissingOperations
hd1_getMissingOperations() {
    hd1_request "GET" "/sync/missing/{from}/{to}" "$1"
}

# GET /sync/full - getFullSync
hd1_getFullSync() {
    hd1_request "GET" "/sync/full" "$1"
}

# GET /sync/stats - getSyncStats
hd1_getSyncStats() {
    hd1_request "GET" "/sync/stats" "$1"
}


# ========================================
# THREE.JS ENTITIES (Generated from spec)
# ========================================


# PUT /threejs/entities/{entityId} - updateEntity
hd1_updateEntity() {
    hd1_request "PUT" "/threejs/entities/{entityId}" "$1"
}

# DELETE /threejs/entities/{entityId} - deleteEntity
hd1_deleteEntity() {
    hd1_request "DELETE" "/threejs/entities/{entityId}" "$1"
}

# POST /threejs/avatars/{sessionId}/move - moveAvatar
hd1_moveAvatar() {
    hd1_request "POST" "/threejs/avatars/{sessionId}/move" "$1"
}

# PUT /threejs/scene - updateScene
hd1_updateScene() {
    hd1_request "PUT" "/threejs/scene" "$1"
}

# GET /threejs/scene - getScene
hd1_getScene() {
    hd1_request "GET" "/threejs/scene" "$1"
}

# POST /threejs/entities - createEntity
hd1_createEntity() {
    hd1_request "POST" "/threejs/entities" "$1"
}


# ========================================
# AVATARS (Generated from spec)
# ========================================



# ========================================
# SCENE MANAGEMENT (Generated from spec)
# ========================================



# ========================================
# SYSTEM (Generated from spec)
# ========================================


# GET /system/version - getVersion
hd1_getVersion() {
    hd1_request "GET" "/system/version" "$1"
}


# ========================================
# CONVENIENCE FUNCTIONS
# ========================================

# Create a box entity
hd1_create_box() {
    local width="${1:-1}"
    local height="${2:-1}"
    local depth="${3:-1}"
    local color="${4:-#777777}"
    local x="${5:-0}"
    local y="${6:-0}"
    local z="${7:-0}"
    
    local data="{
        \"geometry\": {
            \"type\": \"box\",
            \"width\": $width,
            \"height\": $height,
            \"depth\": $depth
        },
        \"material\": {
            \"type\": \"phong\",
            \"color\": \"$color\"
        },
        \"position\": {
            \"x\": $x,
            \"y\": $y,
            \"z\": $z
        }
    }"
    
    hd1_request "POST" "/threejs/entities" "$data"
}

# Create a sphere entity
hd1_create_sphere() {
    local radius="${1:-0.5}"
    local color="${2:-#777777}"
    local x="${3:-0}"
    local y="${4:-0}"
    local z="${5:-0}"
    
    local data="{
        \"geometry\": {
            \"type\": \"sphere\",
            \"radius\": $radius
        },
        \"material\": {
            \"type\": \"phong\",
            \"color\": \"$color\"
        },
        \"position\": {
            \"x\": $x,
            \"y\": $y,
            \"z\": $z
        }
    }"
    
    hd1_request "POST" "/threejs/entities" "$data"
}

# Move entity to new position
hd1_move_entity() {
    local entity_id="$1"
    local x="$2"
    local y="$3"
    local z="$4"
    
    local data="{
        \"position\": {
            \"x\": $x,
            \"y\": $y,
            \"z\": $z
        }
    }"
    
    hd1_request "PUT" "/threejs/entities/$entity_id" "$data"
}

# Set scene background color
hd1_set_background() {
    local color="$1"
    
    local data="{
        \"background\": \"$color\"
    }"
    
    hd1_request "PUT" "/threejs/scene" "$data"
}

# Move avatar
hd1_move_avatar() {
    local session_id="$1"
    local x="$2"
    local y="$3"
    local z="$4"
    local animation="${5:-idle}"
    
    local data="{
        \"position\": {
            \"x\": $x,
            \"y\": $y,
            \"z\": $z
        },
        \"animation\": \"$animation\"
    }"
    
    hd1_request "POST" "/threejs/avatars/$session_id/move" "$data"
}

# Get sync statistics
hd1_sync_stats() {
    hd1_request "GET" "/sync/stats" | jq .
}

# Get scene state
hd1_scene_state() {
    hd1_request "GET" "/threejs/scene" | jq .
}

# Get system version
hd1_version() {
    hd1_request "GET" "/system/version" | jq .
}

# Help function
hd1_help() {
    echo "HD1 Three.js Shell Commands:"
    echo "  hd1_create_box [width] [height] [depth] [color] [x] [y] [z]"
    echo "  hd1_create_sphere [radius] [color] [x] [y] [z]"
    echo "  hd1_move_entity <entity_id> <x> <y> <z>"
    echo "  hd1_move_avatar <session_id> <x> <y> <z> [animation]"
    echo "  hd1_set_background <color>"
    echo "  hd1_sync_stats"
    echo "  hd1_scene_state"
    echo "  hd1_version"
    echo "  hd1_help"
    echo ""
    echo "Environment Variables:"
    echo "  HD1_API_BASE=$HD1_API_BASE"
    echo "  HD1_CLIENT_ID=$HD1_CLIENT_ID"
}

# Initialize
echo "HD1 Three.js Shell Library loaded"
echo "API Base: $HD1_API_BASE"
echo "Client ID: $HD1_CLIENT_ID"
echo "Type 'hd1_help' for available commands"