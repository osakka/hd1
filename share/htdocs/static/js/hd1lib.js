// ===================================================================
// WARNING: AUTO-GENERATED CODE - DO NOT MODIFY THIS FILE
// ===================================================================
//
// This JavaScript API client is automatically generated from api.yaml
// 
// ⚠️  CRITICAL WARNING: ALL MANUAL CHANGES WILL BE LOST ⚠️
//
// • This file is regenerated on every build
// • Changes made here are NON-PERSISTENT  
// • Manual modifications will be OVERWRITTEN
// • To modify API client: Update api.yaml specification
//
// Generation Command: make generate
// Source File: /opt/hd1/src/api.yaml
// Generated: Auto-generated by HD1 specification-driven development
//
// ===================================================================
// THE CROWN JEWEL: 100% Single Source of Truth API Client
// ===================================================================

class HD1APIClient {
    constructor(baseURL = window.HD1_API_BASE || 'http://localhost:8080/api') {
        this.baseURL = baseURL;
        this.defaultHeaders = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        };
    }

    // Core HTTP request method with standard error handling
    async request(method, path, data = null, headers = {}) {
        const url = this.baseURL + path;
        const config = {
            method: method.toUpperCase(),
            headers: { ...this.defaultHeaders, ...headers }
        };

        if (data && (method.toUpperCase() === 'POST' || method.toUpperCase() === 'PUT')) {
            config.body = JSON.stringify(data);
        }

        try {
            const response = await fetch(url, config);
            
            // Standard error handling
            if (!response.ok) {
                const errorData = await response.text();
                throw new Error('HTTP ' + response.status + ': ' + errorData);
            }

            // Parse JSON response
            const responseData = await response.json();
            console.log('API Response:', method, path, responseData);
            return responseData;
        } catch (error) {
            console.error('API Error:', method, path, error);
            throw error;
        }
    }

    // Extract path parameters from URL patterns
    extractPathParams(pattern, values) {
        let path = pattern;
        const params = pattern.match(/\{([^}]+)\}/g) || [];
        
        params.forEach((param, index) => {
            const paramName = param.slice(1, -1); // Remove { }
            const value = values[index] || '';
            path = path.replace(param, value);
        });
        
        return path;
    }


    // GET /sessions - listSessions
    listSessions() {
        return this.request('GET', '/sessions');
    }

    // POST /sessions - createSession
    createSession(data = null) {
        return this.request('POST', '/sessions', data);
    }

    // GET /environments - listEnvironments
    listEnvironments() {
        return this.request('GET', '/environments');
    }

    // POST /sessions/{sessionId}/props/{propId} - instantiateProp
    instantiateProp(param1, param2, data = null) {
        const path = this.extractPathParams('/sessions/{sessionId}/props/{propId}', [param1, param2]);
        return this.request('POST', path, data);
    }

    // GET /scenes - listScenes
    listScenes() {
        return this.request('GET', '/scenes');
    }

    // POST /scenes/{sceneId} - loadScene
    loadScene(param1, data = null) {
        const path = this.extractPathParams('/scenes/{sceneId}', [param1]);
        return this.request('POST', path, data);
    }

    // POST /admin/logging/trace - setTraceModules
    setTraceModules(data = null) {
        return this.request('POST', '/admin/logging/trace', data);
    }

    // GET /admin/logging/logs - getLogs
    getLogs() {
        return this.request('GET', '/admin/logging/logs');
    }

    // PUT /sessions/{sessionId}/camera/position - setCameraPosition
    setCameraPosition(param1, data = null) {
        const path = this.extractPathParams('/sessions/{sessionId}/camera/position', [param1]);
        return this.request('PUT', path, data);
    }

    // GET /props - listProps
    listProps() {
        return this.request('GET', '/props');
    }

    // POST /sessions/{sessionId}/scenes/save - saveSceneFromSession
    saveSceneFromSession(param1, data = null) {
        const path = this.extractPathParams('/sessions/{sessionId}/scenes/save', [param1]);
        return this.request('POST', path, data);
    }

    // POST /scenes/{sceneId}/fork - forkScene
    forkScene(param1, data = null) {
        const path = this.extractPathParams('/scenes/{sceneId}/fork', [param1]);
        return this.request('POST', path, data);
    }

    // GET /sessions/{sessionId}/objects/{objectName} - getObject
    getObject(param1, param2) {
        const path = this.extractPathParams('/sessions/{sessionId}/objects/{objectName}', [param1, param2]);
        return this.request('GET', path);
    }

    // PUT /sessions/{sessionId}/objects/{objectName} - updateObject
    updateObject(param1, param2, data = null) {
        const path = this.extractPathParams('/sessions/{sessionId}/objects/{objectName}', [param1, param2]);
        return this.request('PUT', path, data);
    }

    // DELETE /sessions/{sessionId}/objects/{objectName} - deleteObject
    deleteObject(param1, param2) {
        const path = this.extractPathParams('/sessions/{sessionId}/objects/{objectName}', [param1, param2]);
        return this.request('DELETE', path);
    }

    // POST /admin/logging/level - setLogLevel
    setLogLevel(data = null) {
        return this.request('POST', '/admin/logging/level', data);
    }

    // POST /sessions/{sessionId}/camera/orbit - startCameraOrbit
    startCameraOrbit(param1, data = null) {
        const path = this.extractPathParams('/sessions/{sessionId}/camera/orbit', [param1]);
        return this.request('POST', path, data);
    }

    // GET /version - getVersion
    getVersion() {
        return this.request('GET', '/version');
    }

    // DELETE /sessions/{sessionId} - deleteSession
    deleteSession(param1) {
        const path = this.extractPathParams('/sessions/{sessionId}', [param1]);
        return this.request('DELETE', path);
    }

    // GET /sessions/{sessionId} - getSession
    getSession(param1) {
        const path = this.extractPathParams('/sessions/{sessionId}', [param1]);
        return this.request('GET', path);
    }

    // POST /environments/{environmentId} - applyEnvironment
    applyEnvironment(param1, data = null) {
        const path = this.extractPathParams('/environments/{environmentId}', [param1]);
        return this.request('POST', path, data);
    }

    // POST /sessions/{sessionId}/recording/start - startRecording
    startRecording(param1, data = null) {
        const path = this.extractPathParams('/sessions/{sessionId}/recording/start', [param1]);
        return this.request('POST', path, data);
    }

    // POST /sessions/{sessionId}/recording/stop - stopRecording
    stopRecording(param1, data = null) {
        const path = this.extractPathParams('/sessions/{sessionId}/recording/stop', [param1]);
        return this.request('POST', path, data);
    }

    // POST /sessions/{sessionId}/recording/play - playRecording
    playRecording(param1, data = null) {
        const path = this.extractPathParams('/sessions/{sessionId}/recording/play', [param1]);
        return this.request('POST', path, data);
    }

    // GET /sessions/{sessionId}/recording/status - getRecordingStatus
    getRecordingStatus(param1) {
        const path = this.extractPathParams('/sessions/{sessionId}/recording/status', [param1]);
        return this.request('GET', path);
    }

    // GET /sessions/{sessionId}/objects - listObjects
    listObjects(param1) {
        const path = this.extractPathParams('/sessions/{sessionId}/objects', [param1]);
        return this.request('GET', path);
    }

    // POST /sessions/{sessionId}/objects - createObject
    createObject(param1, data = null) {
        const path = this.extractPathParams('/sessions/{sessionId}/objects', [param1]);
        return this.request('POST', path, data);
    }

    // POST /admin/logging/config - setLoggingConfig
    setLoggingConfig(data = null) {
        return this.request('POST', '/admin/logging/config', data);
    }

    // GET /admin/logging/config - getLoggingConfig
    getLoggingConfig() {
        return this.request('GET', '/admin/logging/config');
    }

    // POST /browser/refresh - forceRefresh
    forceRefresh(data = null) {
        return this.request('POST', '/browser/refresh', data);
    }

    // POST /browser/canvas - setCanvas
    setCanvas(data = null) {
        return this.request('POST', '/browser/canvas', data);
    }

}

// Export for use with existing HD1 A-Frame system
window.HD1APIClient = HD1APIClient;

// Create global API client instance
window.hd1API = new HD1APIClient();

console.log('👑 HD1 API Client loaded - Auto-generated from specification');
console.log('Available methods:', Object.getOwnPropertyNames(HD1APIClient.prototype).filter(name => name !== 'constructor'));