/**
 * ===================================================================
 * WARNING: AUTO-GENERATED CODE - DO NOT MODIFY THIS FILE
 * ===================================================================
 *
 * This file is automatically generated from api_new.yaml specification.
 * 
 * ⚠️  CRITICAL WARNING: ALL MANUAL CHANGES WILL BE LOST ⚠️
 *
 * • This file is regenerated on every build
 * • Changes made here are NON-PERSISTENT
 * • Manual modifications will be OVERWRITTEN
 * • To modify API client: Update api_new.yaml specification
 *
 * Generation Command: make generate
 * Source File: /opt/hd1/src/api.yaml
 * Generated: Auto-generated by HD1 Three.js specification-driven development
 *
 * ===================================================================
 * SINGLE SOURCE OF TRUTH: api.yaml drives ALL client methods
 * ===================================================================
 */

class HD1ThreeJSAPIClient {
    constructor(baseURL = '/api', clientId = null) {
        this.baseURL = baseURL;
        this.clientId = clientId || this.generateClientId();
    }

    generateClientId() {
        return 'client-' + Math.random().toString(36).substr(2, 9) + '-' + Date.now();
    }

    async request(path, options = {}) {
        const url = this.baseURL + path;
        const headers = {
            'Content-Type': 'application/json',
            'X-Client-ID': this.clientId,
            ...options.headers
        };

        const response = await fetch(url, {
            ...options,
            headers
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        return response.json();
    }

    // ========================================
    // SYNC OPERATIONS (Generated from spec)
    // ========================================


    /**
     * GET /sync/missing/{from}/{to} - getMissingOperations
     */
    async getMissingOperations(param1, param2) {
        const path = this.extractPathParams('/sync/missing/{from}/{to}', [param1, param2]);
        return this.request('GET', path);
    }

    /**
     * GET /sync/full - getFullSync
     */
    async getFullSync() {
        return this.request('GET', '/sync/full');
    }

    /**
     * GET /sync/stats - getSyncStats
     */
    async getSyncStats() {
        return this.request('GET', '/sync/stats');
    }

    /**
     * POST /sync/operations - submitOperation
     */
    async submitOperation(data = null) {
        return this.request('POST', '/sync/operations', data);
    }


    // ========================================
    // ENTITIES (Generated from spec)
    // ========================================


    /**
     * POST /entities - createEntity
     */
    async createEntity(data = null) {
        return this.request('POST', '/entities', data);
    }

    /**
     * PUT /entities/{entityId} - updateEntity
     */
    async updateEntity(param1, data = null) {
        const path = this.extractPathParams('/entities/{entityId}', [param1]);
        return this.request('PUT', path, data);
    }

    /**
     * DELETE /entities/{entityId} - deleteEntity
     */
    async deleteEntity(param1) {
        const path = this.extractPathParams('/entities/{entityId}', [param1]);
        return this.request('DELETE', path);
    }


    // ========================================
    // AVATARS (Generated from spec)
    // ========================================


    /**
     * GET /avatars - getAvatars
     */
    async getAvatars() {
        return this.request('GET', '/avatars');
    }

    /**
     * POST /avatars - createAvatar
     */
    async createAvatar(data = null) {
        return this.request('POST', '/avatars', data);
    }

    /**
     * DELETE /avatars/{avatarId} - removeAvatar
     */
    async removeAvatar(param1) {
        const path = this.extractPathParams('/avatars/{avatarId}', [param1]);
        return this.request('DELETE', path);
    }

    /**
     * PUT /avatars/{avatarId} - updateAvatar
     */
    async updateAvatar(param1, data = null) {
        const path = this.extractPathParams('/avatars/{avatarId}', [param1]);
        return this.request('PUT', path, data);
    }

    /**
     * POST /avatars/{sessionId}/move - moveAvatar
     */
    async moveAvatar(param1, data = null) {
        const path = this.extractPathParams('/avatars/{sessionId}/move', [param1]);
        return this.request('POST', path, data);
    }


    // ========================================
    // SCENE MANAGEMENT (Generated from spec)
    // ========================================


    /**
     * GET /scene - getScene
     */
    async getScene() {
        return this.request('GET', '/scene');
    }

    /**
     * PUT /scene - updateScene
     */
    async updateScene(data = null) {
        return this.request('PUT', '/scene', data);
    }


    // ========================================
    // SYSTEM (Generated from spec)
    // ========================================


    /**
     * GET /system/version - getVersion
     */
    async getVersion() {
        return this.request('GET', '/system/version');
    }


    // ========================================
    // CONVENIENCE METHODS
    // ========================================

    /**
     * Create a box entity with default material
     */
    async createBox(width = 1, height = 1, depth = 1, color = '#777777', position = {x: 0, y: 0, z: 0}) {
        return this.createEntity({
            geometry: {
                type: 'box',
                width: width,
                height: height,
                depth: depth
            },
            material: {
                type: 'phong',
                color: color
            },
            position: position
        });
    }

    /**
     * Create a sphere entity with default material
     */
    async createSphere(radius = 0.5, color = '#777777', position = {x: 0, y: 0, z: 0}) {
        return this.createEntity({
            geometry: {
                type: 'sphere',
                radius: radius
            },
            material: {
                type: 'phong',
                color: color
            },
            position: position
        });
    }

    /**
     * Move entity to new position
     */
    async moveEntity(entityId, position) {
        return this.updateEntity(entityId, { position: position });
    }

    /**
     * Change entity color
     */
    async changeEntityColor(entityId, color) {
        return this.updateEntity(entityId, {
            material: {
                type: 'phong',
                color: color
            }
        });
    }

    /**
     * Set scene background color
     */
    async setBackground(color) {
        return this.updateScene({ background: color });
    }

    /**
     * Add fog to scene
     */
    async addFog(color = '#ffffff', near = 1, far = 100) {
        return this.updateScene({
            fog: {
                color: color,
                near: near,
                far: far
            }
        });
    }
}

// Export for module systems
if (typeof module !== 'undefined' && module.exports) {
    module.exports = HD1ThreeJSAPIClient;
}

// Global export
if (typeof window !== 'undefined') {
    window.HD1ThreeJSAPIClient = HD1ThreeJSAPIClient;
}